"""–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task —Å –ø–æ–ª—è–º–∏ id, title, description –∏ status.
üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ tasks –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–º–µ—Ç–æ–¥ GET).
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ POST).
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ PUT).
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ DELETE).
üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞."""
import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

task = []


class Task(BaseModel):
    id: int
    title: str
    description: Optional[str]
    status: str


class TaskIn(BaseModel):
    title: str
    description: Optional[str]
    status: str


# @app.get("/")
# async def root():
#     return {"message": "Hello World123"}
#


@app.get("/tasks", response_model=list[Task])
async def tasks():
    return task


@app.post("/tasks", response_model=list[Task])
async def create_task(new_task: TaskIn):
    task.append(
        Task(
            id=len(task) + 1,
            title=new_task.title,
            description=new_task.description,
            status=new_task.status,
        )
    )
    return task


@app.put("/tasks", response_model=Task)
async def edit_task(task_id: int, edit_task: TaskIn):
    current_task = None
    for i in task:
        if i.id == task_id:
            # current_task = i[task_id - 1]
            current_task = i
    if current_task:
        current_task.title = edit_task.title
        current_task.description = edit_task.description
        current_task.status = edit_task.status
    else:
        raise HTTPException(status_code=404, detail="Task not found!")
    return current_task


@app.delete("/tasks", response_model=dict)
async def del_task(id_deleted_task: int):
    for i in task:
        if i.id == id_deleted_task - 1:
            task.pop(i.id)
            return {"mess": f"task {i} was deleted"}
    raise HTTPException(status_code=404, detail="Task not found!")


if __name__ == "__main__":
    uvicorn.run("sem_05_task_1:app", host="127.0.0.1", port=8000, reload=True)
